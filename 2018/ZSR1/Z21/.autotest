{
    "id": 5464,
    "name": "Tehnike programiranja (2017\/2018), ZSR 1, zadatak 21",
    "language": "C++",
    "preferred_compiler": "g++",
    "required_compiler": "g++",
    "compiler_features": [

    ],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "profile": "true",
    "debug": "true",
    "test": "true",
    "compile": "true",
    "run": "false",
    "test_specifications": [
        {
            "id": 329,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT1 (skriveni) - test konstruktora sa jednim parametrom\n    try {\n        std::cout << std::boolalpha << std::is_convertible<double, NepreklapajucaKugla>::value << std::endl;\n        NepreklapajucaKugla k;\n        k.Ispisi();\n        std::cout << std::endl;\n        try {\n            NepreklapajucaKugla k1(5);\n        }\n        catch(std::logic_error &ex){\n            std::cout << \"OK \" << ex.what() << std::endl;\n        }\n        NepreklapajucaKugla k2(-1);\n\n    }\n    catch(std::domain_error &ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "false\\n{(0,0,0),0}\\nOK Nedozvoljeno preklapanje\\nOK Ilegalan poluprecnik"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 330,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT2 (skriveni) - Test konstruktora sa 4 parametra\n    try{\n        NepreklapajucaKugla k1(5,5,5,5);\n        k1.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k2 = {-5,-5,-5,2};\n        k2.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k3(-1,1,-1,-1);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(5,5,5),5}\\n{(-5,-5,-5),2}\\nOK Ilegalan poluprecnik"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 331,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT3 (skriveni) - Test konstruktra sa tuple-om\n\n    try{\n        std::cout << std::boolalpha << pretvorba_tipa_vise_argumenata<NepreklapajucaKugla, std::tuple<double, double, double>, double>::value << std::endl;\n        NepreklapajucaKugla k1(std::make_tuple(5,5,5),5);\n        k1.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k2 = {-5,-5,-5,2};\n        k2.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k3(-1,1,-1,-1);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <type_traits>\n#include <iomanip>\n\ntemplate <typename To_, typename... From_>\nclass pretvorba_tipa_vise_argumenata {\nprivate:\n    template <typename To>\n    struct testKonstrukcije {\n        testKonstrukcije(To);\n    };\n\n    template <typename To, typename... From>\n    struct pomocna {};\n\n    template <typename To, typename... From>\n    static auto test(pomocna<To, From...>)\n    -> decltype(testKonstrukcije<To>({std::declval<From>()...}), std::true_type());\n    static auto test(...)\n    -> std::false_type;\n\npublic:\n    static constexpr bool value = decltype(test(pomocna<To_, From_...>()))::value;\n};",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "false\\n{(5,5,5),5}\\n{(-5,-5,-5),2}\\nOK Ilegalan poluprecnik"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 332,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT4 (skriveni) - Test metoda DajX, DajY, DajZ i DajCentar\n    \n    try{\n        const NepreklapajucaKugla k(std::make_tuple(1,2,3), 2.3);\n        std:: cout << std::fixed << std::setprecision(3);\n        std::cout << \"Centar: \" << k.DajX() << \" \" << k.DajY() << \" \"<< k.DajZ();\n        std::cout << \"\\nPoluprecnik: \" << k.DajPoluprecnik();\n        NepreklapajucaKugla k1(4,3,10,1);\n        std::tuple<double, double, double> centar(k1.DajCentar());\n        std::cout << \"\\nNovi centar: \" <<std::get<0>(centar) << \" \" << std::get<1>(centar) << \" \" << std::get<2>(centar);\n\n    }\n    catch(...) {\n        std::cout << \"IZUZETAK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Centar: 1.000 2.000 3.000\\nPoluprecnik: 2.300\\nNovi centar: 4.000 3.000 10.000"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 333,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT5 (skriveni) - Test metoda DajPovrsinu,  DajZapreminu i Ispisi i RastojanjeCentara\n    \n    try{\n        const NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        const NepreklapajucaKugla k1(std::make_tuple(-80,-100,30.3), 18.01);\n        std::cout << std::fixed << std::setprecision(5);\n        std::cout << \"Povrsina kugle k: \" << k.DajPovrsinu()\n                  << \"\\nZapremina kugle k : \" << k.DajZapreminu();\n        std::cout << std::endl;\n        std::cout << \"Povrsina kugle k1: \" << k.DajPovrsinu()\n                  << \"\\nZapremina kugle k1: \" << k.DajZapreminu();\n        std::cout << \"\\nRastojanje centara kugle k i k1: \"\n                  << RastojanjeCentara(k,k1);\n        std::cout << std::endl << std::defaultfloat;\n        k.Ispisi();\n\n    }\n    catch(...) {\n        std::cout << \"IZUZETAK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Povrsina kugle k: 11537.05920\\nZapremina kugle k : 116524.29789\\nPovrsina kugle k1: 11537.05920\\nZapremina kugle k1: 116524.29789\\nRastojanje centara kugle k i k1: 145.61212\\n{(8,16,32),30.3}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 334,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT6 (skriveni)  - Test medota PostaviX, PostaviY, PostaviZ\n\n\n    try{\n        NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        k.PostaviX(-1).PostaviY(-2).PostaviZ(-3);\n        k.Ispisi();\n    }\n    catch(...) {\n        std::cout << \"IZUZETAK\";\n    }\n",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(-1,-2,-3),30.3}\\n"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 335,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT7 (skriveni) - Test metode postavi poluprecnik\n\n    try{\n        NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        k.PostaviPoluprecnik(20.289);\n        k.Ispisi();\n        std::cout << std::endl;\n        k.PostaviPoluprecnik(-0.0000001);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...) {\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(8,16,32),20.289}\\nOK Ilegalan poluprecnik"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 336,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    try{\n        NepreklapajucaKugla k(20);\n        k.PostaviCentar(1.5,10,25);\n        k.Ispisi();\n        std::cout << std::endl;\n        k.PostaviCentar(std::make_tuple(25,10,1.5));\n        k.Ispisi();\n    }\n    catch(...){\n        std::cout << \"IZUZETAK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(1.5,10,25),20}\\n{(25,10,1.5),20}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 337,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    try{\n        NepreklapajucaKugla k(10,10,10,20);\n        k.Transliraj(20.25, 1,-18.31);\n        k.Transliraj(-20.25, -1,18.31);\n        k.Ispisi();\n    }\n    catch(...){\n        std::cout << \"IZUZETAK\";\n    }\n",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <iostream>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(10,10,10),20}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 338,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT10 (neaktivni) Provjera da li su zabranjeni koperacijuci konstruktor i operator dodjele\n\n    try {\n        std::cout << std::boolalpha << std::is_constructible<NepreklapajucaKugla, NepreklapajucaKugla>::value\n                  << \" \" << std::is_assignable<NepreklapajucaKugla, NepreklapajucaKugla>::value;\n        std::cout << \"\\nEND\";\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK1 \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK1\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>\n#include <type_traits>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "false false\\nEND"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 339,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT11 (skriveni) - Trivijalno testiranje preklapanja\n    try{\n        NepreklapajucaKugla k1(2, 3, 1, 5);\n        k1.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k2(10, 7, 8, 2);\n        k2.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k3(4, 6, 3, 7);\n        k3.Ispisi(); std::cout << std::endl;\n    }\n    catch(std::logic_error &ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "#include <iomanip>",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(2,3,1),5}\\n{(10,7,8),2}\\nOK Nedozvoljeno preklapanje"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 340,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT12 (skriveni) - Test dodirivanje dvije kugle\n    try{\n        NepreklapajucaKugla k1(2, 3, 1, 5);\n        k1.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k2(10, 7, 8, 2);\n        k2.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k3(2, 9.1, 1, 1);\n        k3.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k4(2, -3, 1, 1);\n        k4.Ispisi(); std::cout << std::endl;\n    }\n    catch(std::logic_error &ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(2,3,1),5}\\n{(10,7,8),2}\\n{(2,9.1,1),1}\\nOK Nedozvoljeno preklapanje"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 341,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "    \/\/AT13 (skriveni) - Iskljucivanje kugle sa kraja\n    try{\n        NepreklapajucaKugla k1(2, 3, 1, 5);\n        k1.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k2(10, 7, 8, 2);\n        k2.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k3(2, 9.1, 1, 1);\n        k3.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k4(2, -3.1, 1, 1);\n        k4.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla *k5(new NepreklapajucaKugla(2, -4, 10, 2));\n        k5->Ispisi(); std::cout << std::endl;\n        delete k5;\n        NepreklapajucaKugla k6(2, -4, 10, 2);\n        k6.Ispisi(); std::cout << std::endl;\n    }\n    catch(std::logic_error &ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }\n",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(2,3,1),5}\\n{(10,7,8),2}\\n{(2,9.1,1),1}\\n{(2,-3.1,1),1}\\n{(2,-4,10),2}\\n{(2,-4,10),2}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 342,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT14 (nekativni) - Iskljucivanje kugli iz sredine\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i * 3, i * 4, i * 2, 1));\n        }\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        p.erase(p.begin() + 5);\n        p.erase(p.begin() + 5);\n        p.erase(p.begin() + 5);\n\n        try{NepreklapajucaKugla(16,21,11,2);}catch(std::logic_error ex){std::cout<<\" OK1 \" << ex.what() << std::endl;}\n        try{NepreklapajucaKugla(16,21,11,1);}catch(std::logic_error ex){std::cout<< \" OK2 \" << ex.what() << std::endl;}\n        try{NepreklapajucaKugla(16,21,11,0.73);}catch(std::logic_error ex){std::cout<< \" NOT OK \";}\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(3,4,2),1}\\n{(6,8,4),1}\\n{(9,12,6),1}\\n{(12,16,8),1}\\n{(15,20,10),1}\\n{(18,24,12),1}\\n{(21,28,14),1}\\n{(24,32,16),1}\\n{(27,36,18),1}\\n{(30,40,20),1}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n\\n{(3,4,2),1}\\n{(6,8,4),1}\\n{(9,12,6),1}\\n{(12,16,8),1}\\n{(15,20,10),1}\\n{(27,36,18),1}\\n{(30,40,20),1}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 343,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT15  (skriveni) Iskljucivanje kugle sa pocetka\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*-2, i * -4, i *-1, 1.5));\n        }\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n        p.erase(p.begin());\n        p.erase(p.begin());\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n        try{NepreklapajucaKugla(-5,-8,-20,16.5);}catch(std::logic_error ex){std::cout<<\" OK1 \"<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-5,-8,-20,16);}catch(std::logic_error ex){std::cout<< \" OK2 \"<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-22,-20,11,20);}catch(std::logic_error ex){std::cout<< \" OK3 \"<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-22,-40,-12,2*sqrt(2)-1.5);}catch(std::logic_error ex){std::cout<< \" OK4 \"<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-22,-40,-12,2*sqrt(2)-1.6);}catch(std::logic_error ex){std::cout<< \" NOT OK \";}\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(-2,-4,-1),1.5}\\n{(-4,-8,-2),1.5}\\n{(-6,-12,-3),1.5}\\n{(-8,-16,-4),1.5}\\n{(-10,-20,-5),1.5}\\n{(-12,-24,-6),1.5}\\n{(-14,-28,-7),1.5}\\n{(-16,-32,-8),1.5}\\n{(-18,-36,-9),1.5}\\n{(-20,-40,-10),1.5}\\n\\n{(-6,-12,-3),1.5}\\n{(-8,-16,-4),1.5}\\n{(-10,-20,-5),1.5}\\n{(-12,-24,-6),1.5}\\n{(-14,-28,-7),1.5}\\n{(-16,-32,-8),1.5}\\n{(-18,-36,-9),1.5}\\n{(-20,-40,-10),1.5}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n OK3 Nedozvoljeno preklapanje\\n OK4 Nedozvoljeno preklapanje\\n\\n{(-6,-12,-3),1.5}\\n{(-8,-16,-4),1.5}\\n{(-10,-20,-5),1.5}\\n{(-12,-24,-6),1.5}\\n{(-14,-28,-7),1.5}\\n{(-16,-32,-8),1.5}\\n{(-18,-36,-9),1.5}\\n{(-20,-40,-10),1.5}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 344,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT16 (skriveni)  Test metode PostaviPoluprecnik\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*3, i * 4, i , 2));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[4]->PostaviPoluprecnik(sqrt(26)-(2 + 1e-14));}catch(std::logic_error ex){std::cout<<\" OK1 \"<< ex.what() << std::endl;}\n        try{p[4]->PostaviPoluprecnik(sqrt(26)-2.1);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        p.erase(p.begin() + 3);\n        try{p[0]->PostaviPoluprecnik(sqrt(26)-(2 + 1e-14));}catch(std::logic_error ex){std::cout<<\" OK2 \"<< ex.what() << std::endl;}\n        try{p[0]->PostaviPoluprecnik(sqrt(26)-2.1);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[8]->PostaviPoluprecnik(sqrt(26)-2);}catch(std::logic_error ex){std::cout<<\" OK3 \"<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(3,4,1),2}\\n{(6,8,2),2}\\n{(9,12,3),2}\\n{(12,16,4),2}\\n{(15,20,5),2}\\n{(18,24,6),2}\\n{(21,28,7),2}\\n{(24,32,8),2}\\n{(27,36,9),2}\\n{(30,40,10),2}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n OK3 Nedozvoljeno preklapanje\\n\\n{(3,4,1),2.99902}\\n{(6,8,2),2}\\n{(9,12,3),2}\\n{(15,20,5),2.99902}\\n{(18,24,6),2}\\n{(21,28,7),2}\\n{(24,32,8),2}\\n{(27,36,9),2}\\n{(30,40,10),2}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 345,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT17 (skriveni)  Test metoda postavi centar\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*10, i * 15, i*20 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->PostaviCentar(20,30,36.9);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[0]->PostaviCentar(20,30,37 - 1e-14);}catch(std::logic_error ex){std::cout<<\" OK1 \"<< ex.what() << std::endl;}\n        p.erase(p.begin() + 5);\n        try{p[2]->PostaviCentar(std::make_tuple(40,60,70));}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[2]->PostaviCentar(std::make_tuple(40,60,73));}catch(std::logic_error ex){std::cout<<\" OK2 \"<< ex.what() << std::endl;}\n        try{p[8]->PostaviCentar(std::make_tuple(80,120,60));}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[8]->PostaviCentar(std::make_tuple(40,60,73));}catch(std::logic_error ex){std::cout<<\" OK3 \"<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(10,15,20),1}\\n{(20,30,40),2}\\n{(30,45,60),3}\\n{(40,60,80),4}\\n{(50,75,100),5}\\n{(60,90,120),6}\\n{(70,105,140),7}\\n{(80,120,160),8}\\n{(90,135,180),9}\\n{(100,150,200),10}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n OK3 Nedozvoljeno preklapanje\\n\\n{(20,30,36.9),1}\\n{(20,30,40),2}\\n{(40,60,70),3}\\n{(40,60,80),4}\\n{(50,75,100),5}\\n{(70,105,140),7}\\n{(80,120,160),8}\\n{(90,135,180),9}\\n{(80,120,60),10}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 346,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT18 (skriveni) Test metode Transliraj\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*10, i * 15, i*20 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->Transliraj(10,15,15);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[0]->Transliraj(0,0,3);}catch(std::logic_error ex){std::cout<<\" OK1 \"<< ex.what() << std::endl;}\n        try{p[5]->Transliraj(10,15,7);}catch(std::logic_error ex){std::cout<<\" OK2 \"<< ex.what() << std::endl;}\n        try{p[5]->Transliraj(10,15,6);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[9]->Transliraj(-10,-15,-1.1);}catch(std::logic_error ex){std::cout<<\" OK3 \"<< ex.what() << std::endl;}\n        try{p[9]->Transliraj(-10,-15,-0.9);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        std::cout << \"\\nEND\";\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"NOT OK \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(10,15,20),1}\\n{(20,30,40),2}\\n{(30,45,60),3}\\n{(40,60,80),4}\\n{(50,75,100),5}\\n{(60,90,120),6}\\n{(70,105,140),7}\\n{(80,120,160),8}\\n{(90,135,180),9}\\n{(100,150,200),10}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n OK3 Nedozvoljeno preklapanje\\n\\nEND\\n{(20,30,35),1}\\n{(20,30,40),2}\\n{(30,45,60),3}\\n{(40,60,80),4}\\n{(50,75,100),5}\\n{(70,105,126),6}\\n{(70,105,140),7}\\n{(80,120,160),8}\\n{(90,135,180),9}\\n{(90,135,199.1),10}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 347,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT19 (nekativni)  Provjera metoda PostaviX, PostaviY, PostaviZ\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*10, i * 15, i*20 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->PostaviX(20).PostaviY(30).PostaviZ(36.9);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[0]->PostaviZ(37);}catch(std::logic_error ex){std::cout<<\" OK1 \"<< ex.what() << std::endl;}\n        p.erase(p.begin()+6);\n        try{p[5]->PostaviY(80).PostaviZ(100);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[5]->PostaviX(59.7);}catch(std::logic_error ex){std::cout<<\" OK2 \"<< ex.what() << std::endl;}\n        try{p[8]->PostaviX(95).PostaviZ(195);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[8]->PostaviY(145);}catch(std::logic_error ex){std::cout<<\" OK3 \"<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK1\";\n    }\n",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(10,15,20),1}\\n{(20,30,40),2}\\n{(30,45,60),3}\\n{(40,60,80),4}\\n{(50,75,100),5}\\n{(60,90,120),6}\\n{(70,105,140),7}\\n{(80,120,160),8}\\n{(90,135,180),9}\\n{(100,150,200),10}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n OK3 Nedozvoljeno preklapanje\\n\\n{(20,30,36.9),1}\\n{(20,30,40),2}\\n{(30,45,60),3}\\n{(40,60,80),4}\\n{(50,75,100),5}\\n{(60,80,100),6}\\n{(80,120,160),8}\\n{(90,135,180),9}\\n{(95,150,195),10}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 348,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/    AT20 (nekativni) - Preklapanje kugle sa samom sobom\n\/\/    pomjeramo kuglu tako da se ona poklapa sa samim sobom\n\/\/    u metodama setterima, pri promjeni parametara kugla se ne bi trebala provjeravati sa samim sobom\n\n        try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*20, i * 15, i*10 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->PostaviX(20).PostaviY(15).PostaviZ(10);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[0]->Transliraj(1,-1,0);}catch(std::logic_error ex){std::cout<<\"NOT OK \";}\n        p.erase(p.begin()+6);\n        try{p[4]->PostaviCentar(100,75,50);}catch(std::logic_error ex){std::cout<<\" NOT OK \";}\n        try{p[4]->PostaviCentar(std::make_tuple(100,75,50));}catch(std::logic_error ex){std::cout<<\"NOT OK \";}\n        try{p[5]->PostaviCentar(100,75,50);}catch(std::logic_error ex){std::cout<<\" OK1 \"<< ex.what() << std::endl;}\n        try{p[5]->PostaviCentar(std::make_tuple(100,75,50));}catch(std::logic_error ex){std::cout<<\" OK2 \"<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &ex) {\n        std::cout << \"OK1 \" << ex.what();\n    }\n    catch (...) {\n        std::cout << \"NOT OK1\";\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "{(20,15,10),1}\\n{(40,30,20),2}\\n{(60,45,30),3}\\n{(80,60,40),4}\\n{(100,75,50),5}\\n{(120,90,60),6}\\n{(140,105,70),7}\\n{(160,120,80),8}\\n{(180,135,90),9}\\n{(200,150,100),10}\\n OK1 Nedozvoljeno preklapanje\\n OK2 Nedozvoljeno preklapanje\\n\\n{(21,14,10),1}\\n{(40,30,20),2}\\n{(60,45,30),3}\\n{(80,60,40),4}\\n{(100,75,50),5}\\n{(120,90,60),6}\\n{(160,120,80),8}\\n{(180,135,90),9}\\n{(200,150,100),10}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 349,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/AT (c9 - 1) (javni)\n\/\/Testove pisao Dino \u0160atrovi\u0107\n\/\/Sva evenutalna pitanja u vezi testova mo\u017eete postaviti na forumu\n\/\/za zadace na courseware-u predmeta\n\n_main();",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "3\n2 3 1\n5\n10 7 8\n2\n4 6 3\n7\n5 8 4\n1"
            },
            "expected": [
                "Unesite broj kugli: Unesite centar za 1. kuglu: Unesite poluprecnik: Unesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\\nUnesite centar za 3. kuglu: Unesite poluprecnik: \\nKugle nakon obavljenog sortiranja: \\n{(5,8,4),1}\\n{(10,7,8),2}\\n{(2,3,1),5}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 350,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/AT (c9 - 2) (javni)\n\n_main();",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "0\n-1\n3\n0 0 0\n1\n0 0 2\n1\n0 0 3\n1\n0 0 10\n2"
            },
            "expected": [
                "Unesite broj kugli: Neispravan broj kugli, unesite ponovo!\\nNeispravan broj kugli, unesite ponovo!\\nUnesite centar za 1. kuglu: Unesite poluprecnik: Unesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\\nUnesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: \\nKugle nakon obavljenog sortiranja: \\n{(0,0,0),1}\\n{(0,0,3),1}\\n{(0,0,10),2}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 351,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/AT (c9 - 3) (javni)\n\n_main();",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "5\n0 0 d\n1 1 1\nd\n1\n5 6 8\n5\n17 20 31\n6\n30 30 30\n2\n123 -130 500\n30"
            },
            "expected": [
                "Unesite broj kugli: Unesite centar za 1. kuglu: Neispravan centar, unesite ponovo:\\nUnesite poluprecnik: Neispravan poluprecnik, unesite ponovo:\\nUnesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: Unesite centar za 4. kuglu: Unesite poluprecnik: Unesite centar za 5. kuglu: Unesite poluprecnik: \\nKugle nakon obavljenog sortiranja: \\n{(1,1,1),1}\\n{(30,30,30),2}\\n{(5,6,8),5}\\n{(17,20,31),6}\\n{(123,-130,500),30}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 352,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/AT (c9 - 4) (javni)\n\n_main();",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": "2\n0 0 0\n-1\n-2\n2\n1 1 1\n0\n1 1 1\n1\n8 8 8\n2.1"
            },
            "expected": [
                "Unesite broj kugli: Unesite centar za 1. kuglu: Unesite poluprecnik: Neispravan poluprecnik, unesite ponovo:\\nNeispravan poluprecnik, unesite ponovo:\\nUnesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\\nUnesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\\nUnesite centar za 2. kuglu: Unesite poluprecnik: \\nKugle nakon obavljenog sortiranja: \\n{(0,0,0),2}\\n{(8,8,8),2.1}"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}